import hashlib
import os
import requests
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

URL = "https://www.humansnotinvited.com/"
SAVE_DIR = "captcha_images"
DB_FILE = "db.txt"

os.makedirs(SAVE_DIR, exist_ok=True)


def load_db(path=DB_FILE):
    db = {}
    with open(path, 'r') as f:
        for line in f:
            md5_hash, category = line.strip().split(';')
            db[md5_hash] = category
    return db


def get_md5(file_path):
    with open(file_path, 'rb') as f:
        content = f.read()
    return hashlib.md5(content).hexdigest()


def download_captcha_images(driver):
    driver.get(URL)
    try:
        print("[*] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located((By.TAG_NAME, "img"))
        )
    except:
        print("[!] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")

    tiles = driver.find_elements(By.TAG_NAME, "img")
    print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(tiles)} <img> —Ç–µ–≥–æ–≤")

    image_paths = []
    for idx, tile in enumerate(tiles):
        src = tile.get_attribute('src')
        if not src:
            continue
        if "/captcha/image.php" in src:
            response = requests.get(src, verify=False)
            filename = os.path.join(SAVE_DIR, f"tile_{idx}.png")
            with open(filename, "wb") as f:
                f.write(response.content)
            image_paths.append(filename)
            print(f"[‚úì] –°–∫–∞—á–∞–ª tile_{idx}.png")
        else:
            print(f"[i] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx} —Å –≤–Ω–µ—à–Ω–∏–º src: {src}")

    return image_paths


def solve_captcha_with_db(driver, db):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_element = driver.find_element(By.CSS_SELECTOR, ".header strong")
    task_keyword = task_element.text.lower().strip()
    print(f"[üéØ] –ó–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å ¬´{task_keyword}¬ª")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–ø—á–∏
    image_paths = download_captcha_images(driver)
    if not image_paths:
        print("[!] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ div —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (—á—Ç–æ–±—ã –∫–ª–∏–∫–∞—Ç—å)
    image_divs = driver.find_elements(By.CLASS_NAME, "captcha-image")

    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—á–∏—Ç–∞–µ–º md5 –∏ —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑–µ
    for idx, path in enumerate(image_paths):
        md5_hash = get_md5(path)
        category = db.get(md5_hash, None)
        if category == task_keyword:
            print(f"[‚úì] –ü–æ–¥—Ö–æ–¥–∏—Ç: tile_{idx}.png (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
            try:
                image_divs[idx].click()
                print(f"[üñ±Ô∏è] –ö–ª–∏–∫ –ø–æ tile_{idx}.png")
            except IndexError:
                print(f"[!] –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è tile_{idx}.png –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"[‚úó] –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: tile_{idx}.png (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")

    # –ù–∞–∂–∞—Ç—å Verify
    verify_button = driver.find_element(By.CSS_SELECTOR, ".button")
    verify_button.click()
    print("[üöÄ] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Verify")


def main():
    chrome_path = os.path.join(os.path.dirname(__file__), "chromedriver.exe")

    if not os.path.exists(chrome_path):
        print(f"[‚ùå] chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {chrome_path}")
        return
    else:
        print(f"[‚úì] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chromedriver –ø–æ –ø—É—Ç–∏: {chrome_path}")

    options = webdriver.ChromeOptions()
    # options.add_argument('--headless')  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞

    service = Service(executable_path=chrome_path)
    driver = webdriver.Chrome(service=service, options=options)

    db = load_db()

    driver.get(URL)
    WebDriverWait(driver, 15).until(
        EC.presence_of_element_located((By.CSS_SELECTOR, ".header strong"))
    )
    solve_captcha_with_db(driver, db)

    input("[‚è∏] –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
    driver.quit()


if __name__ == "__main__":
    main()
