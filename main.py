from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
import base64
import os
import time
import requests
import torch
import requests
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

URL = "https://www.humansnotinvited.com/"
SAVE_DIR = "captcha_images"
os.makedirs(SAVE_DIR, exist_ok=True)


def download_captcha_images(driver):
    driver.get(URL)

    try:
        print("[*] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located((By.TAG_NAME, "img"))
        )
    except:
        print("[!] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å")

    tiles = driver.find_elements(By.TAG_NAME, "img")
    print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(tiles)} <img> —Ç–µ–≥–æ–≤")

    image_paths = []
    for idx, tile in enumerate(tiles):
        src = tile.get_attribute('src')
        if not src:
            continue
        if "/captcha/image.php" in src:
            response = requests.get(src, verify=False)
            filename = os.path.join(SAVE_DIR, f"tile_{idx}.png")
            with open(filename, "wb") as f:
                f.write(response.content)
            image_paths.append(filename)
            print(f"[‚úì] –°–∫–∞—á–∞–ª tile_{idx}.png")
        else:
            print(f"[i] –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {idx} —Å –≤–Ω–µ—à–Ω–∏–º src: {src}")

    return image_paths


def click_matching_tiles(driver, task_keyword, image_captions):
    print(f"[*] –ö–ª–∏–∫–∞—é –ø–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º —Å '{task_keyword}'...")
    # –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ .captcha-image –ª–µ–∂–∞—Ç div'—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
    captcha_images = driver.find_elements(By.CSS_SELECTOR, ".captcha-image")

    for idx, caption in enumerate(image_captions):
        if task_keyword.lower() in caption.lower():
            print(f"[‚úì] –ö–ª–∏–∫–∞—é –ø–æ tile_{idx}.png ‚Üí {caption}")
            captcha_images[idx].click()
        else:
            print(f"[‚úó] –ù–µ –∫–ª–∏–∫–∞—é –ø–æ tile_{idx}.png ‚Üí {caption}")


# –í analyze_images –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å captions, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
def analyze_images(image_paths):
    print("\n[*] –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

    processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
    model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model.to(device)

    captions = []
    for path in image_paths:
        image = Image.open(path).convert("RGB")
        inputs = processor(images=image, return_tensors="pt").to(device)
        out = model.generate(**inputs)
        caption = processor.decode(out[0], skip_special_tokens=True)
        captions.append(caption)
        print(f"[üì∑] {os.path.basename(path)}: {caption}")
    return captions

def solve_captcha(driver, image_paths):
    print("\n[*] –ù–∞—á–∏–Ω–∞—é —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏...")

    # –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    task_element = driver.find_element(By.CSS_SELECTOR, ".header strong")
    task_keyword = task_element.text.lower().strip()
    print(f"[üéØ] –ó–∞–¥–∞–Ω–∏–µ: –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å ¬´{task_keyword}¬ª")

    # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
    model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
    device = "cuda" if torch.cuda.is_available() else "cpu"
    model.to(device)

    # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    captions = []
    for path in image_paths:
        image = Image.open(path).convert("RGB")
        inputs = processor(images=image, return_tensors="pt").to(device)
        out = model.generate(**inputs)
        caption = processor.decode(out[0], skip_special_tokens=True)
        captions.append(caption)

    # –®–∞–≥ 4: –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
    selected_indices = []
    for idx, caption in enumerate(captions):
        if task_keyword in caption.lower():
            selected_indices.append(idx)
            print(f"[‚úì] –ü–æ–¥—Ö–æ–¥–∏—Ç: tile_{idx}.png ‚Üí {caption}")
        else:
            print(f"[‚úó] –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç: tile_{idx}.png ‚Üí {caption}")

    # –®–∞–≥ 5: –ö–ª–∏–∫–∞–µ–º –ø–æ –Ω—É–∂–Ω—ã–º
    image_divs = driver.find_elements(By.CLASS_NAME, "captcha-image")
    for idx in selected_indices:
        try:
            image_divs[idx].click()
            print(f"[üñ±Ô∏è] –ö–ª–∏–∫ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é tile_{idx}.png")
        except IndexError:
            print(f"[!] –ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ {idx}")

    # –®–∞–≥ 6: –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "Verify"
    verify_button = driver.find_element(By.CLASS_NAME, "button")
    verify_button.click()
    print("[üöÄ] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Verify")

def main():
    chrome_path = os.path.join(os.path.dirname(__file__), "chromedriver.exe")

    if not os.path.exists(chrome_path):
        print(f"[‚ùå] chromedriver.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {chrome_path}")
        return
    else:
        print(f"[‚úì] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è chromedriver –ø–æ –ø—É—Ç–∏: {chrome_path}")

    options = webdriver.ChromeOptions()
    # options.add_argument('--headless')  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞

    service = Service(executable_path=chrome_path)
    driver = webdriver.Chrome(service=service, options=options)

    image_paths = download_captcha_images(driver)
    if image_paths:
        captions = analyze_images(image_paths)
        task_keyword = "cars"  # –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Å —Å–∞–π—Ç–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        click_matching_tiles(driver, task_keyword, captions)
    else:
        print("[!] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É Verify –ø–æ—Å–ª–µ –∫–ª–∏–∫–æ–≤
    verify_button = driver.find_element(By.CSS_SELECTOR, ".button")
    print("[üöÄ] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ Verify")
    verify_button.click()

    input("[‚è∏] –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –±—Ä–∞—É–∑–µ—Ä–∞...")
    driver.quit()


if __name__ == "__main__":
    main()
